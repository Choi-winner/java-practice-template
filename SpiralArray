package tutorials.practices;

public class SpiralArray {
	
	enum STATUS{ 
		GO_RIGHT, GO_DOWN, GO_LEFT, GO_UP, INITIALIZE, END; 
		
	}
	
	public static void main(String[] args) {
		int ROW = 6;
		int COLUMN = 7;
		
		int[][] arr = new int[ROW][COLUMN];
		
		
		int right_distance = 0;
		int left_distance = 0;
		int down_distance = 0;
		int up_distance = 0;
		
		int CURRENT_ROW = 0;
		int CURRENT_COLUMN = 0;
		
		int num = 0;
		int cont = 1;
		STATUS WHERE_TO_GO = STATUS.INITIALIZE;
		while(cont == 1) {

			switch(WHERE_TO_GO) {
			case INITIALIZE:
				right_distance = COLUMN;
				left_distance = COLUMN - 1;
				down_distance = ROW - 1;
				up_distance = ROW - 2;
				WHERE_TO_GO = STATUS.GO_RIGHT;
				break;
			case GO_RIGHT:
				if(right_distance > 0) {
					for(int i = right_distance; i > 0 ; i-- ) {
						System.out.println("num: "+num+"/ case: "+WHERE_TO_GO+"/ CURRENT_ROW: "+CURRENT_ROW+"/ CURRENT_COLUMN: "+CURRENT_COLUMN+"/ right_distance: "+right_distance);
						arr[CURRENT_ROW][CURRENT_COLUMN] = num;
						num++;
						CURRENT_COLUMN++;
					}
					CURRENT_COLUMN--;
					CURRENT_ROW++;
					right_distance -= 2;
					WHERE_TO_GO = STATUS.GO_DOWN;
					break;
				}
				else {
					WHERE_TO_GO = STATUS.END;
					break;
				}

			case GO_DOWN:
				if(down_distance > 0) {
					for(int i = down_distance; i > 0; i--) {
						System.out.println("num: "+num+"/ case: "+WHERE_TO_GO+"/ CURRENT_ROW: "+CURRENT_ROW+"/ CURRENT_COLUMN: "+CURRENT_COLUMN+"/ down_distance: "+down_distance);
						arr[CURRENT_ROW][CURRENT_COLUMN] = num;
						num++;
						CURRENT_ROW++;
					}
					CURRENT_ROW--;
					CURRENT_COLUMN--;
					down_distance -= 2;
					WHERE_TO_GO = STATUS.GO_LEFT;
					break;
				}
				else {
					WHERE_TO_GO = STATUS.END;
					break;
				}

			case GO_LEFT:
				if(left_distance > 0) {
					for(int i = left_distance; i > 0; i--) {
						System.out.println("num: "+num+"/ case: "+WHERE_TO_GO+"/ CURRENT_ROW: "+CURRENT_ROW+"/ CURRENT_COLUMN: "+CURRENT_COLUMN+"/ left_distance: "+left_distance);
						arr[CURRENT_ROW][CURRENT_COLUMN] = num;// 이 곳에서 인덱스 예외 가능성 있음.
						num++;
						CURRENT_COLUMN--; 
					}
					CURRENT_COLUMN++;
					CURRENT_ROW--;
					left_distance -= 2;
					WHERE_TO_GO = STATUS.GO_UP;
					break;
				}
				else {
					WHERE_TO_GO = STATUS.END;
					break;
				}
			case GO_UP:
				if(up_distance > 0) {
					for(int i = up_distance; i>0; i--) {
						System.out.println("num: "+num+"/ case: "+WHERE_TO_GO+"/ CURRENT_ROW: "+CURRENT_ROW+"/ CURRENT_COLUMN: "+CURRENT_COLUMN+"/ up_distance: "+up_distance);
						arr[CURRENT_ROW][CURRENT_COLUMN] = num;
						num++;
						CURRENT_ROW--;
					}
					CURRENT_ROW++;
					CURRENT_COLUMN++;
					up_distance -= 2;
					WHERE_TO_GO = STATUS.GO_RIGHT;
					break;
				}
				else {
					WHERE_TO_GO = STATUS.END;
					break;
				}
				
			case END:
				System.out.println("The END case\nThe result is :");
				for(int[] a : arr) {
					switch(COLUMN) {
					case 1:
						System.out.println(a[0]);
						break;
					case 2:
						System.out.println(a[0]+" "+a[1]);
						break;
					case 3:
						System.out.println(a[0]+" "+a[1]+" "+a[2]);
						break;
					case 4:
						System.out.println(a[0]+" "+a[1]+" "+a[2]+" "+a[3]);
						break;
					case 5:
						System.out.println(a[0]+" "+a[1]+" "+a[2]+" "+a[3]+" "+a[4]);
						break;
					case 6:
						System.out.println(a[0]+" "+a[1]+" "+a[2]+" "+a[3]+" "+a[4]+" "+a[5]);
						break;
					case 7:
						System.out.println(a[0]+" "+a[1]+" "+a[2]+" "+a[3]+" "+a[4]+" "+a[5]+" "+a[6]+" ");
						break;
					case 8:
						System.out.println(a[0]+" "+a[1]+" "+a[2]+" "+a[3]+" "+a[4]+" "+a[5]+" "+a[6]+" "+a[7]);
						break;
					}
	
				}
				cont = 0;
				break;
			}		
		}
	}

}
